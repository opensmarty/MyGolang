1-1.下面这段代码输出什么？

  type Direction int

  const (
      North Direction = iota
      East
      South
      West
  )

  func (d Direction) String() string {
      return [...]string{"North", "East", "South", "West"}[d]
  }

  func main() {
      fmt.Println(South)
  }
  
1-2. 下面代码输出什么
package main

import "fmt"

type Direction int

const (
	North Direction = iota
	East
	South
	West
)


func main() {
	var api interface{}
	api = South
	switch api.(type) {
	case int:
		fmt.Println(api.(int))
	case Direction:
		fmt.Println(api.(Direction))
	}
}

1-3. 下面代码有什么错误？怎样改正？
type Direction = int

const (
	North Direction = iota
	East
	South
	West
)

func main() {
	var api interface{}
	api = South
	switch api.(type) {
	case int:
		fmt.Println(api.(int))
	case Direction:
		fmt.Println(api.(Direction))
	}
}

2.下面代码输出什么？

  type Math struct {
      x, y int
  }

  var m = map[string]Math{
      "foo": Math{2, 3},
  }

  func main() {
      m["foo"].x = 4
      fmt.Println(m["foo"].x)
  }
  A. 4
  B. compilation error
3.下面这段代码输出什么？

const (
	a = iota
	b = iota
)
const (
	name = "name"
	c    = iota
	d   
	e= "aasf"
	f 
	h  =iota
	m 
)
func main() {
	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(d)
	fmt.Println(f)
	fmt.Println(m)
}
4. 下面这段代码输出什么？为什么？

type People interface {
    Show()
}

type Student struct{}

func (stu *Student) Show() {

}

func main() {

    var s *Student
    if s == nil {
        fmt.Println("s is nil")
    } else {
        fmt.Println("s is not nil")
    }
    var p People = s
    if p == nil {
        fmt.Println("p is nil")
    } else {
        fmt.Println("p is not nil")
    }
}

5.下面这段代码输出什么？为什么？

func (i int) PrintInt ()  {
    fmt.Println(i)
}

func main() {
    var i int = 1
    i.PrintInt()
}
A. 1
B. compilation error

6. 下面这段代码输出什么？为什么？

type People interface {
    Speak(string) string
}

type Student struct{}

func (stu *Student) Speak(think string) (talk string) {
    if think == "speak" {
        talk = "speak"
    } else {
        talk = "hi"
    }
    return
}

func main() {
    var peo People = Student{}
    think := "speak"
    fmt.Println(peo.Speak(think))
}
A. speak
B. compilation error

7.下面的两个切片声明中有什么区别？哪个更可取？

A. var a []int
B. a := []int{}

8. A、B、C、D 哪些选项有语法错误？

type S struct {
}

func f(x interface{}) {
}

func g(x *interface{}) {
}

func main() {
    s := S{}
    p := &s
    f(s) //A
    g(s) //B
    f(p) //C
    g(p) //D
}

9. 下面 A、B 两处应该填入什么代码，才能确保顺利打印出结果？

type S struct {
    m string
}

func f() *S {
    return __  //A
}

func main() {
    p := __    //B
    fmt.Println(p.m) //print "foo"
}
10. 下面的代码有几处语法问题，各是什么？

  package main
  import (
      "fmt"
  )
  func main() {
      var x string = nil
      if x == nil {
          x = "default"
      }
      fmt.Println(x)
  }
 
 11. return 之后的 defer 语句会执行吗，下面这段代码输出什么？

var a bool = true
func main() {
    defer func(){
        fmt.Println("1")
    }()
    if a == true {
        fmt.Println("2")
        return
    }
    defer func(){
        fmt.Println("3")
    }()
}

12. 输出什么？
  func main() {
      if a := 1; false {
      } else if b := 2; false {
      } else {
          println(a, b)
      }
  }
  A. 1 2
  B. compilation error

13. 下面这段代码输出什么？

func main() {
    m := map[int]string{0:"zero",1:"one"}
    for k,v := range m {
        fmt.Println(k,v)
    }
}

14. 下面这段代码输出什么？

func main() {
    a := 1
    b := 2
    defer calc("1", a, calc("10", a, b))
    a = 0
    defer calc("2", a, calc("20", a, b))
    b = 1
}

func calc(index string, a, b int) int {
    ret := a + b
    fmt.Println(index, a, b, ret)
    return ret
}

17. 下面这段代码输出什么？

func main() {
    var a = [5]int{1, 2, 3, 4, 5}
    var r [5]int

    for i, v := range a {
        if i == 0 {
            a[1] = 12
            a[2] = 13
        }
        r[i] = v
    }
    fmt.Println("r = ", r)
    fmt.Println("a = ", a)
}

18. 下面代码里的 counter 的输出值？

func main() {

    var m = map[string]int{
        "A": 21,
        "B": 22,
        "C": 23,
    }
    counter := 0
    for k, v := range m {
        if counter == 0 {
            delete(m, "A")
        }
        counter++
        fmt.Println(k, v)
    }
    fmt.Println("counter is ", counter)
}
A. 2
B. 3
C. 2 或 3


19. 下面这段代码输出什么？

func change(s ...int) {
    s = append(s,3)
}

func main() {
    slice := make([]int,5,5)
    slice[0] = 1
    slice[1] = 2
    change(slice...)
    fmt.Println(slice)
    change(slice[0:2]...)
    fmt.Println(slice)
}

20. 下面列举的是 recover() 的几种调用方式，哪些是正确的？

A.
func main() {
    recover()
    panic(1)
}
B.
func main() {
    defer recover()
    panic(1)
}
C.
func main() {
    defer func() {
        recover()
    }()
    panic(1)
}
D.
func main() {
    defer func() {
        defer func() {
            recover()
        }()
    }()
    panic(1)
}

21. 下面代码输出什么，请说明？
func main() {
     defer func() {
         fmt.Print(recover())
     }()
     defer func() {
         defer fmt.Print(recover())
         panic(1)
    }()
     defer recover() 
    panic(2)
}
22-1. 输出什么？
func main() {
     defer func() {
        fmt.Print(recover())
     }()
     defer func() {
         defer func() {
             fmt.Print(recover())
         }()
         panic(1)
    }()
    defer recover()
    panic(2)
}
22-2. 输出什么？

func main() {
	defer_call()
	defer_call2()
}

func defer_call() {
	defer func() {
		fmt.Println(recover())
		fmt.Println(recover())
		fmt.Println("打印前")
	}()
	defer func() {
		fmt.Println(recover())
		fmt.Println("打印中")
		panic("触发异常22")
	}()
	defer func() {
		fmt.Println("打印后")
		panic("触发异常11")
	}()
	panic("触发异常")
	fmt.Println("func defer_call")
}

func defer_call2() {
	fmt.Println("func defer_call2")
}

22-3. 输出什么？
func main() {
	defer func() {
		fmt.Print(recover())
	}()
	defer func() {
		defer fmt.Print(recover())
		panic(1)
	}()
	defer recover()
	panic(2)
}

23. 下面代码输出什么？
func False() bool {
	return false
}

func main() {
	a := false
	switch a {
	case false:
		fmt.Println("false")
	case true:
		fmt.Println("true")
	}

	switch False() {
	case false:
		fmt.Println("false")
	case true:
		fmt.Println("true")
	}

	switch False(); {
	case false:
		fmt.Println("false")
	case true:
		fmt.Println("true")
	}

	switch {
	case false:
		fmt.Println("false")
	case true:
		fmt.Println("true")
	}
	
	switch m := False(); {
	case m == false:
		fmt.Println("false")
	case m == true:
		fmt.Println("true")
	}
}

47. 下面代码输出什么？

 func main() {
     isMatch := func(i int) bool {
         switch(i) {
         case 1:
         case 2:
             return true
         }
         return false
     }

    fmt.Println(isMatch(1))
    fmt.Println(isMatch(2))
}

24. 下面代码输出正确的是？

func main() {
    i := 1
    s := []string{"A", "B", "C"}
    i, s[i-1] = 2, "Z"
    fmt.Printf("s: %v \n", s)
}
A. s: [Z,B,C]
B. s: [A,Z,C]

25. 关于变量的自增和自减操作，下面语句正确的是？

A.
i := 1
i++

B.
i := 1
j = i++

C.
i := 1
++i

D.
i := 1
i--

26. 下面这段代码能否编译通过？如果通过，输出什么？

type User struct{}
type User1 User
type User2 = User

func (i User1) m1() {
    fmt.Println("m1")
}
func (i User) m2() {
    fmt.Println("m2")
}

func main() {
    var i1 User1
    var i2 User2
    i1.m1()
    i2.m2()
}

41. 下面代码输出什么？

 func test(x byte)  {
     fmt.Println(x)
 }
 
 func main() {
     var a byte = 0x11 
     var b uint8 = a
     var c uint8 = a + b
     test(c)
}

27. 
下面代码输出什么？

func main() {
    x := []string{"a", "b", "c"}
    for v := range x {
        fmt.Print(v)
    }
}
28. 下面代码是否能编译通过？如果通过，输出什么？

 func Foo(x interface{}) {
     if x == nil {
         fmt.Println("empty interface")
         return
     }
     fmt.Println("non-empty interface")
 }
 func main() {
     var x *int = nil
    Foo(x)
}

30. 下面代码输出什么？
func main() {
     ch := make(chan int, 100)
     // A
     go func() {              
         for i := 0; i < 10; i++ {
             ch <- i
         }
     }()
     // B
    go func() {
        for {
            a, ok := <-ch
            if !ok {
                fmt.Println("close")
                return
            }
            fmt.Println("a: ", a)
        }
    }()
    close(ch)
    fmt.Println("ok")
    time.Sleep(time.Second * 10)
}

31. 下面的代码有什么问题？
func Stop(stop <-chan bool) {
    close(stop)
}

43. 下面代码输出什么？
func main() {
    var ch chan int
    select {
    case v, ok := <-ch:
        println(v, ok)
    default:
        println("default") 
    }
}

32. 下面这段代码存在什么问题？
 type Param map[string]interface{}
 type Show struct {
     *Param
 }
 
func main() {
     s := new(Show)
     s.Param["day"] = 2
}

33. 下面这段代码输出什么？

var x = []int{2: 2, 3, 0: 1}

func main() {
    fmt.Println(x)
}

34. 下面代码编译能通过吗？

func main()  
{ 
    fmt.Println("hello world")
}

35-1. 下面代码输出什么？

 type ConfigOne struct {
     Daemon string
 }
 
 func (c *ConfigOne) String() string {
     return fmt.Sprintf("print: %v", c)
 }
 
 func main() {
    c := &ConfigOne{}
    c.String()
}

35-2. 下面代码输出什么？

 type Orange struct {
     Quantity int
 }
 
 func (o *Orange) Increase(n int) {
     o.Quantity += n
 }
 
 func (o *Orange) Decrease(n int) {
    o.Quantity -= n
}

func (o *Orange) String() string {
    return fmt.Sprintf("local:%#v", o.Quantity)
}

func main() {
    var orange Orange
    orange.Increase(10)
    orange.Decrease(5)
    fmt.Println(orange)
}


36. 请指出下面代码的错误？

 package main
 
 var gvar int 
 
 func main() {  
     var one int   
     two := 2      
     var three int 
     three = 3

    func(unused string) {
        fmt.Println("Unused arg. No compile error")
    }("what?")
}

42. 下面的代码有什么问题？

func main() {
    const x = 123
    const y = 1.23
    fmt.Println(x)
}

29. 下面代码有什么问题？
	const i = 100
	var j = 123

	func main() {
    	fmt.Println(&j, j)
    	fmt.Println(&i, i)
	}
	
37. 下面代码输出什么？

func main() {
	x := interface{}(nil)
	y := (*int)(nil)
	a := y == x
	b := y == nil
	d := x == nil
	_, c := x.(interface{})
	println(a, b, c, d)
}

48. 下面的代码能否正确输出？

func main() {
    var fn1 = func() {}
    var fn2 = func() {}

    if fn1 != fn2 {
        println("fn1 not equal fn2")
    }
}

38. 下面代码有什么问题？

func main() {
    m := make(map[string]int,2)
    cap(m) 
}

39. 下面的代码有什么问题？

func main() {  
    var x = nil 
    _ = x
}

40. 能否通过编译？
type info struct {
	result int
}

func work() (int, error) {
	return 13, nil
}

func main() {
	var data info
 	data.result, err := work() 
	if err != nil {
		fmt.Println(err)
	}
	fmt.Printf("info: %+v\n", data)
}

44. 下面这段代码输出什么？

 type People struct {
     name string `json:"name"`
 }
 
 func main() {
     js := `{
         "name":"seekload"
     }`
     var p People
    err := json.Unmarshal([]byte(js), &p)
    if err != nil {
        fmt.Println("err: ", err)
        return
    }
    fmt.Println(p)
}

45. .下面的代码输出什么？

func main() {  
    fmt.Println(~2) 
}

46. 下面这段代码输出什么？

 type T struct {
     ls []int
 }
 
 func foo(t T) {
     t.ls[0] = 100
 }
 
 func main() {
    var t = T{
        ls: []int{1, 2, 3},
    }

    foo(t)
    fmt.Println(t.ls[0])
}

49. 下面代码输出什么？

type T struct {
    n int
}

func main() {
    m := make(map[int]T)
    m[0].n = 1
    fmt.Println(m[0].n)
}

50. 下面的代码有什么问题？

 type X struct {}
 
 func (x *X) test()  {
     println(x)
 }
 
 func main() {
     var a *X
    a.test()

    X{}.test()
}
